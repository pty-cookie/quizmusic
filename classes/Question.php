<?php
/**
 * Classe abstraite Question
 *
 * üìö CONCEPT POO : ABSTRACTION
 * Une classe abstraite est un "mod√®le" qui d√©finit un contrat
 * que toutes les classes filles DOIVENT respecter.
 *
 * On ne peut PAS instancier directement une classe abstraite :
 * ‚ùå $q = new Question(); // ERREUR !
 * ‚úÖ $q = new QuestionTexte(); // OK !
 *
 * POURQUOI UTILISER UNE CLASSE ABSTRAITE ?
 * - D√©finir une structure commune √† tous les types de questions
 * - Forcer les classes filles √† impl√©menter certaines m√©thodes
 * - √âviter la duplication de code
 */

abstract class Question {
    // üìö CONCEPT POO : ENCAPSULATION avec protected
    // protected = accessible dans cette classe ET dans les classes qui h√©ritent
    // private = accessible uniquement dans cette classe
    // public = accessible partout

    // üìö TYPAGE STRICT (PHP 7.4+)
    // On sp√©cifie le type de chaque propri√©t√© pour plus de s√©curit√©
    protected int $id;                    // Identifiant unique en BDD
    protected string $texteQuestion;       // Le texte de la question
    protected array $reponses;             // Tableau des 4 r√©ponses possibles
    protected int $bonneReponse;           // Index de la bonne r√©ponse (0, 1, 2 ou 3)
    protected ?string $explication;        // Explication (peut √™tre null gr√¢ce au ?)

    /**
     * Constructeur de la classe
     *
     * üìö CONCEPT : LE CONSTRUCTEUR
     * M√©thode sp√©ciale appel√©e automatiquement lors de la cr√©ation d'un objet
     * Permet d'initialiser les propri√©t√©s avec des valeurs
     *
     * @param int $id Identifiant de la question en BDD
     * @param string $texteQuestion Le texte de la question
     * @param array $reponses Tableau des 4 r√©ponses possibles
     * @param int $bonneReponse Index de la bonne r√©ponse (0 √† 3)
     * @param string|null $explication Explication optionnelle
     */
    public function __construct(
        int $id,
        string $texteQuestion,
        array $reponses,
        int $bonneReponse,
        ?string $explication = null  // üìö Le ? signifie "peut √™tre null"
    ) {
        // üìö CONCEPT : $this
        // $this fait r√©f√©rence √† l'instance courante de l'objet
        // $this->id signifie "la propri√©t√© $id de CET objet"
        $this->id = $id;
        $this->texteQuestion = $texteQuestion;
        $this->reponses = $reponses;
        $this->bonneReponse = $bonneReponse;
        $this->explication = $explication;
    }

    // üìö CONCEPT POO : GETTERS (accesseurs)
    // Les getters permettent d'acc√©der aux propri√©t√©s private/protected
    // depuis l'ext√©rieur de la classe, de mani√®re contr√¥l√©e

    /**
     * Retourne l'ID de la question
     *
     * POURQUOI UN GETTER ?
     * Au lieu de faire : $question->id (impossible car protected)
     * On fait : $question->getId() (possible car public)
     */
    public function getId(): int {
        return $this->id;
    }

    public function getTexteQuestion(): string {
        return $this->texteQuestion;
    }

    public function getReponses(): array {
        return $this->reponses;
    }

    public function getBonneReponse(): int {
        return $this->bonneReponse;
    }

    public function getExplication(): ?string {
        return $this->explication;
    }

    /**
     * V√©rifie si la r√©ponse de l'utilisateur est correcte
     *
     * üìö CONCEPT : M√âTHODE M√âTIER
     * Une m√©thode m√©tier encapsule une logique sp√©cifique
     * Ici, la v√©rification d'une r√©ponse
     *
     * @param int $reponseUtilisateur L'index choisi par l'utilisateur
     * @return bool true si correct, false sinon
     */
    public function estCorrect(int $reponseUtilisateur): bool {
        // üìö CONCEPT : Comparaison stricte ===
        // === compare valeur ET type (plus s√ªr que ==)
        // 0 === 0 ‚Üí true
        // 0 === "0" ‚Üí false (car types diff√©rents)
        return $reponseUtilisateur === $this->bonneReponse;
    }

    /**
     * G√©n√®re le code HTML pour afficher la question
     *
     * üìö CONCEPT POO : M√âTHODE ABSTRAITE
     * abstract = cette m√©thode n'a PAS d'impl√©mentation ici
     * Chaque classe fille DOIT l'impl√©menter avec son propre code
     *
     * POURQUOI ?
     * Parce que l'affichage est diff√©rent selon le type de question :
     * - QuestionTexte affiche juste du texte
     * - QuestionImage affiche une image
     * - QuestionAudio affiche un lecteur audio
     *
     * @param int $index Position de la question dans le quiz (pour l'affichage)
     * @return string Code HTML g√©n√©r√©
     */
    abstract public function afficherHTML(int $index): string;

    /**
     * Retourne le type de question
     *
     * üìö CONCEPT : POLYMORPHISME
     * Chaque classe fille retournera son propre type
     * Cela permet de traiter diff√©remment chaque type
     *
     * @return string 'texte', 'image' ou 'audio'
     */
    abstract public function getType(): string;
}
